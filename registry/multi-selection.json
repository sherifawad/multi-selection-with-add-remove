{
	"name": "multi-selection",
	"type": "registry:ui",
	"registryDependencies": ["button", "badge", "command", "popover", "scroll-area", "separator", "tabs", "tooltip"],
	"dependencies": ["react-highlight-words"],
	"devDependencies": ["@types/react-highlight-words"],
	"tailwind": {
		"config": {}
	},
	"cssVars": {},
	"files": [
		{
			"path": "/components/ui/multi-selection.tsx",
			"content": "\"use client\";\n\nimport React from \"react\";\nimport { ChevronDown, LoaderIcon, X } from \"lucide-react\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Command, CommandGroup, CommandInput, CommandItem, CommandList } from \"@/components/ui/command\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { ScrollArea, ScrollBar } from \"@/components/ui/scroll-area\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Tooltip, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\";\nimport { cn } from \"@/lib/utils\";\nimport Highlighter from \"react-highlight-words\";\n\nconst tabTitles = [\"add\", \"remove\"] as const;\ntype tabTitleType = (typeof tabTitles)[number];\n\ntype MultiSelectionProps = {\n\tvalue?: string[];\n\toptions: {\n\t\tlabel: string;\n\t\tvalue: string;\n\t}[];\n\tonValueSelected: (selection?: string[]) => void;\n\tisLoading?: boolean;\n};\n\nexport function MultiSelection({ onValueSelected, value, options, isLoading }: MultiSelectionProps) {\n\tconst [isPopoverOpen, setIsPopoverOpen] = React.useState(false);\n\tconst [activeTab, setActiveTab] = React.useState<tabTitleType>(\"add\");\n\n\tconst ids = React.useMemo(() => new Set(value?.filter(Boolean) || []), [value]);\n\n\tconst data = React.useMemo(() => {\n\t\tif (!options) return { add: [], remove: [] };\n\t\tconst add = options.filter((item) => !ids.has(item.value));\n\t\tconst remove = options.filter((item) => ids.has(item.value));\n\t\treturn { add, remove };\n\t}, [ids, options]);\n\n\tconst handleClosePopover = React.useCallback(() => setIsPopoverOpen(false), []);\n\tconst handleTogglePopover = React.useCallback(() => setIsPopoverOpen((prev) => !prev), []);\n\n\tconst handleSelect = React.useCallback(\n\t\t(item: MultiSelectionProps[\"options\"][number]) => {\n\t\t\tconst newList = activeTab === \"add\" ? [...data.remove, item] : data.remove.filter((d) => d.value !== item.value);\n\t\t\tonValueSelected(newList.map((d) => d.value));\n\t\t},\n\t\t[activeTab, data, onValueSelected]\n\t);\n\n\tconst handleSelectAll = React.useCallback(() => {\n\t\tonValueSelected(activeTab === \"add\" ? options?.map((d) => d.value) : []);\n\t}, [activeTab, onValueSelected, options]);\n\n\tconst handleUnselect = React.useCallback(\n\t\t(item: MultiSelectionProps[\"options\"][number]) => {\n\t\t\tconst newList = data.remove.filter((d) => d.value !== item.value);\n\t\t\tonValueSelected(newList.map((d) => d.value));\n\t\t},\n\t\t[data.remove, onValueSelected]\n\t);\n\n\treturn (\n\t\t<Popover open={isPopoverOpen} onOpenChange={setIsPopoverOpen}>\n\t\t\t<SelectedProperty\n\t\t\t\tisLoading={isLoading}\n\t\t\t\tselected={data.remove}\n\t\t\t\thandleUnselect={handleUnselect}\n\t\t\t\thandleTogglePopover={handleTogglePopover}\n\t\t\t/>\n\t\t\t<PopoverContent className=\"min-w-[var(--radix-popper-anchor-width)] p-0 max-h-[300px] overflow-hidden\">\n\t\t\t\t<PropertiesList\n\t\t\t\t\tonClose={handleClosePopover}\n\t\t\t\t\tselectAll={handleSelectAll}\n\t\t\t\t\tonSelect={handleSelect}\n\t\t\t\t\tlist={data}\n\t\t\t\t\tonTabValueChange={async (tab) => setActiveTab(tab as tabTitleType)}\n\t\t\t\t\tselectedTab={activeTab}\n\t\t\t\t/>\n\t\t\t</PopoverContent>\n\t\t</Popover>\n\t);\n}\n\ntype SelectedPropertyProps = React.ComponentProps<\"button\"> & {\n\tselected?: MultiSelectionProps[\"options\"];\n\tisLoading?: boolean;\n\thandleTogglePopover?: () => void;\n\thandleUnselect?: (item: MultiSelectionProps[\"options\"][number]) => void;\n};\n\nfunction SelectedProperty({\n\tselected = [],\n\tisLoading,\n\thandleTogglePopover,\n\thandleUnselect,\n\tclassName,\n\t...props\n}: SelectedPropertyProps) {\n\treturn (\n\t\t<TooltipProvider>\n\t\t\t<PopoverTrigger asChild>\n\t\t\t\t<Button\n\t\t\t\t\tonClick={handleTogglePopover}\n\t\t\t\t\tdisabled={isLoading}\n\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\t\"flex h-auto min-h-10 w-full items-center justify-between rounded-md border bg-input p-1 hover:bg-input/80\",\n\t\t\t\t\t\tclassName\n\t\t\t\t\t)}\n\t\t\t\t\t{...props}\n\t\t\t\t>\n\t\t\t\t\t{selected.length > 0 ? (\n\t\t\t\t\t\t<Tooltip delayDuration={100}>\n\t\t\t\t\t\t\t<ScrollArea className=\"w-full\">\n\t\t\t\t\t\t\t\t<TooltipTrigger asChild>\n\t\t\t\t\t\t\t\t\t<div className=\"flex w-max gap-1\">\n\t\t\t\t\t\t\t\t\t\t{selected.map((item) => (\n\t\t\t\t\t\t\t\t\t\t\t<Badge\n\t\t\t\t\t\t\t\t\t\t\t\tkey={item.value}\n\t\t\t\t\t\t\t\t\t\t\t\tvariant=\"default\"\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"flex-shrink rounded-sm text-[13.6px] font-medium capitalize hover:bg-primary\"\n\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t{item.label}\n\t\t\t\t\t\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"ml-1 rounded-full outline-none ring-offset-background active:ring-2 active:ring-ring active:ring-offset-2 cursor-pointer\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={(e) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\thandleUnselect?.(item);\n\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<X className=\"h-3 w-3 text-destructive hover:text-destructive/50\" />\n\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t</Badge>\n\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</TooltipTrigger>\n\t\t\t\t\t\t\t\t<ScrollBar orientation=\"horizontal\" className=\"opacity-40\" onClick={(e) => e.stopPropagation()} />\n\t\t\t\t\t\t\t</ScrollArea>\n\t\t\t\t\t\t</Tooltip>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t{isLoading ? (\n\t\t\t\t\t\t\t\t<div className=\"ml-2 mt-1 flex h-6 flex-1 items-center bg-transparent text-muted-foreground outline-none\">\n\t\t\t\t\t\t\t\t\t<LoaderIcon className=\"animate-spin\" />\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t<div className=\"mx-auto flex w-full items-center justify-between\">\n\t\t\t\t\t\t\t\t\t<span className=\"mx-3 text-sm capitalize text-muted-foreground\">select</span>\n\t\t\t\t\t\t\t\t\t<ChevronDown className=\"mx-2 h-4 cursor-pointer text-muted-foreground\" />\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</>\n\t\t\t\t\t)}\n\t\t\t\t</Button>\n\t\t\t</PopoverTrigger>\n\t\t</TooltipProvider>\n\t);\n}\n\ntype PropertiesListProps = {\n\tlist: Record<tabTitleType, MultiSelectionProps[\"options\"][number][]>;\n\tonTabValueChange: (value: tabTitleType) => Promise<void>;\n\tselectedTab: tabTitleType;\n\tselectAll: () => void;\n\tonClose: () => void;\n\tonSelect?: (value: MultiSelectionProps[\"options\"][number]) => void;\n};\n\nfunction PropertiesList({ list, onTabValueChange, selectedTab, ...props }: PropertiesListProps) {\n\treturn (\n\t\t<Tabs\n\t\t\tvalue={selectedTab}\n\t\t\tonValueChange={(value) => onTabValueChange(value as tabTitleType)}\n\t\t\tclassName=\"w-full flex flex-col h-full\"\n\t\t>\n\t\t\t<TabsList className=\"w-full rounded-b-none sticky top-0 z-10 bg-background\">\n\t\t\t\t{tabTitles.map((title) => (\n\t\t\t\t\t<TabsTrigger key={title} className=\"w-full capitalize\" value={title}>\n\t\t\t\t\t\t{title}\n\t\t\t\t\t</TabsTrigger>\n\t\t\t\t))}\n\t\t\t</TabsList>\n\t\t\t<div className=\"flex-grow overflow-auto\">\n\t\t\t\t{tabTitles.map((title) => (\n\t\t\t\t\t<TabsContent key={title} value={title} className=\"h-full m-0\">\n\t\t\t\t\t\t<PropertyCommand items={list[title]} selectedTab={selectedTab} {...props} />\n\t\t\t\t\t</TabsContent>\n\t\t\t\t))}\n\t\t\t</div>\n\t\t</Tabs>\n\t);\n}\n\ntype PropertyCommandProps = {\n\titems: MultiSelectionProps[\"options\"][number][];\n\tonSelect?: (value: MultiSelectionProps[\"options\"][number]) => void;\n\tselectedTab: tabTitleType;\n\tselectAll?: () => void;\n\tonClose?: () => void;\n};\n\nfunction PropertyCommand({ items, onSelect, onClose, selectAll, selectedTab }: PropertyCommandProps) {\n\tconst [searchValue, setSearchValue] = React.useState(\"\");\n\n\tconst searchResults =\n\t\tsearchValue.length > 0 ? items.filter((item) => item.label.toLowerCase().includes(searchValue.toLowerCase())) : [];\n\n\tconst isEmpty =\n\t\t(searchValue.length > 0 && searchResults.length === 0) || (searchValue.length === 0 && items.length === 0);\n\n\tconst getItemList = (item: MultiSelectionProps[\"options\"][number]) => (\n\t\t<CommandItem className=\"cursor-pointer\" key={item.value} onSelect={() => onSelect?.(item)}>\n\t\t\t<Highlighter\n\t\t\t\thighlightClassName=\"rounded-md bg-amber-300/70 px-1 py-0.5 text-foreground\"\n\t\t\t\tsearchWords={searchValue.trim().split(\" \")}\n\t\t\t\tautoEscape\n\t\t\t\ttextToHighlight={item.label}\n\t\t\t/>\n\t\t</CommandItem>\n\t);\n\n\treturn (\n\t\t<Command\n\t\t\tclassName=\"overflow-hidden flex flex-col\"\n\t\t\tfilter={(value, _) => {\n\t\t\t\tif (value.toLowerCase().includes(searchValue.toLowerCase())) return 1;\n\t\t\t\treturn 0;\n\t\t\t}}\n\t\t>\n\t\t\t<CommandInput\n\t\t\t\tvalue={searchValue}\n\t\t\t\tonValueChange={setSearchValue}\n\t\t\t\tclassName=\"placeholder:Capitalize h-10 border-0 sticky top-0 z-10 bg-background\"\n\t\t\t\tplaceholder=\"Search...\"\n\t\t\t/>\n\t\t\t<CommandList className=\"overflow-auto\">\n\t\t\t\t<div className={cn(\"py-6 capitalize text-center hidden\", isEmpty && \"block\")}>empty</div>\n\t\t\t\t<CommandGroup>{items?.map(getItemList)}</CommandGroup>\n\t\t\t</CommandList>\n\t\t\t<div className=\"border-t p-2 bg-background sticky bottom-0 z-10\">\n\t\t\t\t<div className=\"flex  gap-2\">\n\t\t\t\t\t<Badge className=\"max-w-max\">\n\t\t\t\t\t\t{searchValue.length > 0 ? `${searchResults.length} of ${items.length}` : items.length}\n\t\t\t\t\t</Badge>\n\t\t\t\t\t<div className={cn(\"flex flex-1 gap-2\", (searchValue.length > 0 || items.length < 1) && \"hidden\")}>\n\t\t\t\t\t\t<span\n\t\t\t\t\t\t\tonClick={selectAll}\n\t\t\t\t\t\t\tclassName=\"relative flex justify-center gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 cursor-pointer flex-1 text-center capitalize hover:bg-muted\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{selectedTab === \"remove\" ? \"remove all\" : \"add all\"}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t<Separator orientation=\"vertical\" className=\"h-full \" />\n\t\t\t\t\t</div>\n\t\t\t\t\t<span\n\t\t\t\t\t\tonClick={onClose}\n\t\t\t\t\t\tclassName=\" relative flex justify-center gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 cursor-pointer flex-1 text-center capitalize hover:bg-muted\"\n\t\t\t\t\t>\n\t\t\t\t\t\tclose\n\t\t\t\t\t</span>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</Command>\n\t);\n}\n",
			"type": "registry:ui"
		}
	]
}
